// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	users "github.com/rcebrian/users-service/internal"
)

// FindAllUsersUseCase is an autogenerated mock type for the FindAllUsersUseCase type
type FindAllUsersUseCase struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx
func (_m *FindAllUsersUseCase) FindAll(ctx context.Context) ([]users.User, error) {
	ret := _m.Called(ctx)

	var r0 []users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]users.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []users.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFindAllUsersUseCase creates a new instance of FindAllUsersUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFindAllUsersUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *FindAllUsersUseCase {
	mock := &FindAllUsersUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
